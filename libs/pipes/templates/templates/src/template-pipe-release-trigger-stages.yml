## Usage
# stages:
#   - template: ../../../../templates/src/template-pipe-trigger-stages.yml
#     parameters:
#       dependsOn: ''
#       pipeline_triggers:
#         - pipeline_name: 'pipe-contoso-app'
#           patterns:
#             - '@contoso/pipes-contoso-app@*'
#             - '@contoso/infra-contoso-app@*'
#             - '@contoso/app@*'
#             - '@contoso/api@*'
#             - '@contoso/charts-contoso-app-core@*'
#         - pipeline_name: 'pipe-contoso-connectivity'
#           patterns:
#             - '@contoso/pipes-contoso-connectivity@*'

parameters:
  - name: dependsOn
    default: 'Release'
  - name: 'pipeline_triggers'
    type: object
    default: []

stages:
  - stage: Release
    displayName: Release
    dependsOn: Integration
    jobs:
      - job: job_release
        displayName: Tag and Release Project Versions
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - template: ./template-pipe-setup-ci.yml
          - task: CmdLine@2
            displayName: Create New Release Version Tags
            inputs:
              script: |
                git fetch --tags
                pnpm nx run-many -t version --parallel=1
          - bash: |
              echo "Using the following pipeline triggers: "
              echo "${PIPELINE_TRIGGERS}"

              git config --global user.name "GitHub Bot"
              git config --global user.email "pipelines@aiviagroup.com"

              unpushed_tags=$(comm -23 <(echo "$(git tag --list)") <(echo "$(git ls-remote --tags -q | grep -v '\^{}' | cut -f 2 | cut -d '/' -f 3-)") | paste -s -d " " -)
              echo "The following are newly created version tags about to be pushed: "
              echo "$unpushed_tags"

              matched_pipes=""
              for pipeline in $(echo "$PIPELINE_TRIGGERS" | jq -r '.[] | @base64'); do
                _jq() {
                  echo ${pipeline} | base64 --decode | jq -r ${1}
                }
                pipeline_name=$(_jq '.pipeline_name')
                patterns=$(_jq '.patterns')
                for pattern in $(echo "${patterns}" | jq -r '.[]'); do
                  for tag in ${unpushed_tags}; do
                    if [[ "${tag}" == ${pattern} ]]; then
                      matched_pipes="${matched_pipes} ${pipeline_name}"
                      break
                    fi
                  done
                done
              done

              echo "##vso[task.setvariable variable=matched_pipes;isOutput=true]$matched_pipes"

              echo "The following pipelines have been matched with newly pushed tags: "
              echo "$matched_pipes"
            name: match_release_tags
            env:
              PIPELINE_TRIGGERS: ${{ convertToJson(parameters.pipeline_triggers) }}
          - task: CmdLine@2
            displayName: Push Tags
            inputs:
              script: |
                git push origin --tags
  - ${{ each pipeline_trigger in parameters.pipeline_triggers }}:
      - stage: ${{ replace(pipeline_trigger.pipeline_name, '-', '_') }}
        displayName: Trigger ${{pipeline_trigger.pipeline_name}}
        dependsOn: 'Release'
        condition: and(eq(dependencies.Release.result, 'Succeeded'), eq(contains(dependencies.Release.outputs['job_release.match_release_tags.matched_pipes'], '${{pipeline_trigger.pipeline_name}}'), 'true'))
        jobs:
          - job: job_${{ replace(pipeline_trigger.pipeline_name, '-', '_') }}
            displayName: Trigger ${{pipeline_trigger.pipeline_name}}
            pool:
              vmImage: 'ubuntu-latest'
            steps:
              - task: CmdLine@2
                displayName: Echo Task
                inputs:
                  script: |
                    echo "Some of the tag glob patterns for ${{pipeline_trigger.pipeline_name}} have been matched: "
                    echo "patterns: "
                    patterns=(${{ join(' ',pipeline_trigger.patterns) }})
                    for pattern in ${patterns[@]}; do
                      echo $pattern
                    done
                    echo "use the following resource trigger in a pipeline of your chossing if you want it to trigger"
                    echo -e "resources:\n  pipelines:\n    - pipeline: $BUILD_DEFINITIONNAME\n      source: $BUILD_DEFINITIONNAME\n      trigger:\n        stages:\n          - ${{ replace(pipeline_trigger.pipeline_name, '-', '_') }}"
